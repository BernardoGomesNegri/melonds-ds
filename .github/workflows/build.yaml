name: Build (Internal)
on:
  workflow_call:
    secrets:
      TESTFILE_REPO_TOKEN:
        required: true
      TESTFILE_REPO:
        required: true
      DSI_NAND_ARCHIVE:
        required: true
      DSI_NAND:
        required: true
    inputs:
      cmake-args:
        description: Additional arguments to pass to CMake.
        type: string
        required: false
      cores-dir:
        description: The directory in which to place the built cores.
        type: string
        required: false
        default: cores
      info-dir:
        description: The directory in which to place the built info files.
        type: string
        required: false
        default: cores
      runs-on:
        description: The platform on which the workflow will be run. Passed directly to jobs.<job_id>.runs-on.
        type: string
        required: true
      shell:
        description: The shell to use for running commands. Passed directly to jobs.<job_id>.defaults.run.shell.
        type: string
        required: false
        default: bash
      build-dir:
        description: The directory in which to build the project.
        type: string
        required: false
        default: "build"
      dist-dir:
        description: The directory in which to place the built artifacts.
        type: string
        required: false
        default: "build/dist"
      lib-name:
        description: The name of the library to build.
        type: string
        required: false
        default: melondsds_libretro
      lib-ext:
        description: The extension of the library to build.
        type: string
        required: true
      archive-name:
        description: The name of the archive to upload.
        type: string
        required: true
      target:
        description: The platform target.
        type: string
        required: true
      test-suite:
        description: Whether to run the test suite
        type: boolean
        required: false
        default: false
env:
  BUILD_DIR: "${{ github.workspace }}/${{ inputs.build-dir }}"
  DIST_DIR: "${{ github.workspace }}/${{ inputs.dist-dir }}"
  TESTFILE_DIR: "${{ github.workspace }}/testfiles"
jobs:
  build:
    strategy:
      matrix:
        build-type:
          - Debug
          - Release
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        shell: ${{ inputs.shell }}
    steps:
      - name: Check Out Source
        uses: actions/checkout@v3

      - name: Install GCC Problem Matcher
        uses: root-project/gcc-problem-matcher-improved@9d83f12b27a78210f0485fb188e08d94fa807a6d
        if: ${{ runner.os != 'Windows' }} # See https://github.com/root-project/gcc-problem-matcher-improved/issues/3
        with:
          build-directory: ${{ env.BUILD_DIR }}

      - name: Install Dependencies
        uses: ./.github/actions/deps
        with:
          target: ${{ inputs.target }}
          test-suite: ${{ inputs.test-suite }}
          testfile-repo: ${{ secrets.TESTFILE_REPO }}
          testfile-repo-token: ${{ secrets.TESTFILE_REPO_TOKEN }}
          dsi-nand-archive: ${{ secrets.DSI_NAND_ARCHIVE }}

      - name: Create build environment
        run: mkdir -vp "${{ env.BUILD_DIR }}"

      - name: Configure
        if: ${{ !inputs.test-suite }}
        working-directory: "${{ env.BUILD_DIR }}"
        run: |
          cmake "${{ github.workspace }}" \
            -DCMAKE_BUILD_TYPE="${{ matrix.build-type }}" \
            -DMELONDS_REPOSITORY_URL="${{ vars.MELONDS_REPOSITORY_URL }}" \
            -DMELONDS_REPOSITORY_TAG="${{ vars.MELONDS_REPOSITORY_TAG }}" \
            ${{ inputs.cmake-args }}

      - name: Configure (with test suite)
        if: ${{ inputs.test-suite }}
        working-directory: "${{ env.BUILD_DIR }}"
        run: |
          cmake "${{ github.workspace }}" \
            -DCMAKE_BUILD_TYPE="${{ matrix.build-type }}" \
            -DMELONDS_REPOSITORY_URL="${{ vars.MELONDS_REPOSITORY_URL }}" \
            -DMELONDS_REPOSITORY_TAG="${{ vars.MELONDS_REPOSITORY_TAG }}" \
            -DBUILD_TESTING=ON \
            -DRETROARCH="${{ github.workspace }}/RetroArch/retroarch" \
            -DARM7_BIOS="${{ env.TESTFILE_DIR }}/${{ secrets.ARM7_BIOS }}" \
            -DARM9_BIOS="${{ env.TESTFILE_DIR }}/${{ secrets.ARM9_BIOS }}" \
            -DARM7_DSI_BIOS="${{ env.TESTFILE_DIR }}/${{ secrets.ARM7_DSI_BIOS }}" \
            -DARM9_DSI_BIOS="${{ env.TESTFILE_DIR }}/${{ secrets.ARM9_DSI_BIOS }}" \
            -DNDS_FIRMWARE="${{ env.TESTFILE_DIR }}/${{ secrets.NDS_FIRMWARE }}" \
            -DDSI_FIRMWARE="${{ env.TESTFILE_DIR }}/${{ secrets.DSI_FIRMWARE }}" \
            -DDSI_NAND="${{ env.TESTFILE_DIR }}/${{ secrets.DSI_NAND }}" \
            -DNDS_ROM="${{ env.TESTFILE_DIR }}/${{ secrets.NDS_ROM }}" \
            ${{ inputs.cmake-args }}

      - name: Build
        working-directory: "${{ env.BUILD_DIR }}"
        run: cmake --build "${{ env.BUILD_DIR }}" --parallel

      - name: Prepare Artifact Directory
        env:
          CORES_PATH: "${{ env.DIST_DIR }}/${{ inputs.cores-dir }}"
          INFO_PATH: "${{ env.DIST_DIR }}/${{ inputs.info-dir }}"
        run: |
          mkdir -vp "$CORES_PATH" "$INFO_PATH"
          cp -f "${{ env.BUILD_DIR }}/src/libretro/${{ inputs.lib-name }}.${{ inputs.lib-ext }}" "$CORES_PATH"
          cp -f "${{ github.workspace }}/melondsds_libretro.info" "$INFO_PATH/${{ inputs.lib-name }}.info"

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: "${{ inputs.archive-name }}-${{ matrix.build-type }}"
          if-no-files-found: error
          path: "${{ env.DIST_DIR }}"