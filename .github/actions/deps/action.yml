name: Install Dependencies
description: Install Dependencies
inputs:
  target:
    description: Platform target
    required: true
  test-suite:
    description: True if running the test suite
    required: false
    default: "false"
  testfile-dir:
    description: Directory containing the test files
    required: false
    default: "testfiles"
  testfile-repo:
    description: Repository containing the test files
    required: true
  testfile-repo-token:
    description: Token for the repository containing the test files
    required: true
  dsi-nand-archive:
    description: Name of the DSI NAND archive
    required: true

runs:
  using: composite
  steps:
    - name: Install MSYS2 Dependencies (Windows)
      uses: msys2/setup-msys2@v2
      if: ${{ runner.os == 'Windows' }}
      with:
        msystem: MINGW64
        update: true
        install: git pkgconf mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake

    - name: Install Dependencies (macOS)
      if: ${{ runner.os == 'macOS' }}
      shell: bash
      run: brew install pkg-config cmake ninja ccache

      # Skip this step on act due to https://github.com/nektos/act/issues/1849
    - name: Install Dependencies (Linux x86_64/Android)
      if: ${{ !env.ACT && runner.os == 'Linux' && !contains(inputs.target, 'aarch64') }}
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: cmake ninja-build libepoxy-dev ccache p7zip-full xvfb libx11-xcb-dev
        version: 1.0

    - name: Install Dependencies (Linux x86_64/Android + act)
      if: ${{ env.ACT && runner.os == 'Linux' && !contains(inputs.target, 'aarch64') }}
      shell: bash
      run: sudo apt-get update -y && sudo apt-get install -y libepoxy-dev ccache ninja-build cmake p7zip-full xvfb libx11-xcb-dev

    - name: Install Cross-Compile Support (Linux aarch64)
      if: ${{ runner.os == 'Linux' && contains(inputs.target, 'aarch64') }}
      uses: JesseTG/gha-ubuntu-cross@d4db19532db7c115bee0d051944c226c5057cd4a # Fork needed due to https://github.com/cyberjunk/gha-ubuntu-cross/pull/4
      with:
        arch: arm64

    - name: Install Dependencies (Linux aarch64)
      if: ${{ runner.os == 'Linux' && contains(inputs.target, 'aarch64') }}
      uses: awalsh128/cache-apt-pkgs-action@dev
      with:
        packages: cmake ninja-build libepoxy-dev:arm64 ccache
        version: 1.1

    - name: Set Up CCache
      uses: hendrikmuhs/ccache-action@v1.2.10
      with:
        key: ${{ inputs.target }}-${{ matrix.build-type }}
        append-timestamp: false
        variant: ${{ runner.os == 'Windows' && 'sccache' || 'ccache' }}
        # Using sccache on Windows due to https://github.com/hendrikmuhs/ccache-action/issues/112

    - name: Download Test Files
      if: ${{ inputs.test-suite }}
      uses: actions/checkout@v3
      with:
        repository: "${{ inputs.testfile-repo }}"
        token: "${{ inputs.testfile-repo-token }}"
        path: "${{ inputs.testfile-dir }}"

    - name: Prepare Test Files
      if: ${{ inputs.test-suite }}
      working-directory: "${{ inputs.testfile-dir }}"
      shell: bash
      run: 7z x "${{ inputs.dsi-nand-archive }}"

    - name: Check Out RetroArch
      if: ${{ inputs.test-suite }}
      uses: actions/checkout@v3
      with:
        repository: libretro/RetroArch
        path: "${{ github.workspace }}/RetroArch"
        ref: "5b2ed5c9ee45c0ecb740f4835db30189e84058a5"
        token: "${{ inputs.testfile-repo-token }}"

    - name: Configure RetroArch
      if: ${{ inputs.test-suite }}
      env:
        CC: "ccache gcc"
        CXX: "ccache g++"
      working-directory: "${{ github.workspace }}/RetroArch"
      shell: bash
      run: |
        ./configure \
          --disable-accessibility \
          --disable-alsa \
          --disable-builtinbearssl \
          --disable-builtinmbedtls \
          --disable-cdrom \
          --disable-cg \
          --disable-chd \
          --disable-core_info_cache \
          --disable-crtswitchres \
          --disable-discord \
          --disable-egl \
          --disable-ffmpeg \
          --disable-flac \
          --disable-freetype \
          --disable-gfx_widgets \
          --disable-ibxm \
          --disable-imageviewer \
          --disable-jack \
          --disable-libretrodb \
          --disable-materialui \
          --disable-netplaydiscovery \
          --disable-networkgamepad \
          --disable-online_updater \
          --disable-oss \
          --disable-overlay \
          --disable-ozone \
          --disable-parport \
          --disable-patch \
          --disable-pulse \
          --disable-qt \
          --disable-rgui \
          --disable-runahead \
          --disable-sixel \
          --disable-ssa \
          --disable-ssl \
          --disable-stb_image \
          --disable-stb_vorbis \
          --disable-systemd \
          --disable-systemmbedtls \
          --disable-translate \
          --disable-update_assets \
          --disable-update_core_info \
          --disable-update_cores \
          --disable-vg \
          --disable-video_filter \
          --disable-videocore \
          --disable-videoprocessor \
          --disable-xmb \
          --enable-command \
          --enable-sse

    - name: Build RetroArch
      if: ${{ inputs.test-suite }}
      shell: bash
      working-directory: "${{ github.workspace }}/RetroArch"
      run: make -j$(nproc)